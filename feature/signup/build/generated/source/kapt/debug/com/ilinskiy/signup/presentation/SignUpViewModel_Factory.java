// Generated by Dagger (https://dagger.dev).
package com.ilinskiy.signup.presentation;

import com.ilinskiy.signup.domain.usecase.SignUpUseCases;
import com.kursatkumsuz.signup.domain.usecase.SignUpUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SignUpViewModel_Factory implements Factory<SignUpViewModel> {
  private final Provider<SignUpUseCases> useCaseProvider;

  public SignUpViewModel_Factory(Provider<SignUpUseCases> useCaseProvider) {
    this.useCaseProvider = useCaseProvider;
  }

  @Override
  public SignUpViewModel get() {
    return newInstance(useCaseProvider.get());
  }

  public static SignUpViewModel_Factory create(Provider<SignUpUseCases> useCaseProvider) {
    return new SignUpViewModel_Factory(useCaseProvider);
  }

  public static SignUpViewModel newInstance(SignUpUseCases useCase) {
    return new SignUpViewModel(useCase);
  }
}
