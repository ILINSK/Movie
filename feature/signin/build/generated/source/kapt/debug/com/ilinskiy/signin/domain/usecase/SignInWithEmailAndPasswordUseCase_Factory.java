// Generated by Dagger (https://dagger.dev).
package com.ilinskiy.signin.domain.usecase;

import com.ilinskiy.signin.domain.repository.AuthenticationRepository;
import com.kursatkumsuz.signin.domain.repository.AuthenticationRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SignInWithEmailAndPasswordUseCase_Factory implements Factory<SignInWithEmailAndPasswordUseCase> {
  private final Provider<AuthenticationRepository> authRepositoryProvider;

  public SignInWithEmailAndPasswordUseCase_Factory(
      Provider<AuthenticationRepository> authRepositoryProvider) {
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public SignInWithEmailAndPasswordUseCase get() {
    return newInstance(authRepositoryProvider.get());
  }

  public static SignInWithEmailAndPasswordUseCase_Factory create(
      Provider<AuthenticationRepository> authRepositoryProvider) {
    return new SignInWithEmailAndPasswordUseCase_Factory(authRepositoryProvider);
  }

  public static SignInWithEmailAndPasswordUseCase newInstance(
      AuthenticationRepository authRepository) {
    return new SignInWithEmailAndPasswordUseCase(authRepository);
  }
}
