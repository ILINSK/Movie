// Generated by Dagger (https://dagger.dev).
package com.ilinskiy.signin.presentation;

import com.ilinskiy.signin.domain.usecase.SignInWithEmailAndPasswordUseCase;
import com.kursatkumsuz.signin.domain.usecase.SignInWithEmailAndPasswordUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SignInViewModel_Factory implements Factory<SignInViewModel> {
  private final Provider<SignInWithEmailAndPasswordUseCase> signInWithEmailAndPasswordUseCaseProvider;

  public SignInViewModel_Factory(
      Provider<SignInWithEmailAndPasswordUseCase> signInWithEmailAndPasswordUseCaseProvider) {
    this.signInWithEmailAndPasswordUseCaseProvider = signInWithEmailAndPasswordUseCaseProvider;
  }

  @Override
  public SignInViewModel get() {
    return newInstance(signInWithEmailAndPasswordUseCaseProvider.get());
  }

  public static SignInViewModel_Factory create(
      Provider<SignInWithEmailAndPasswordUseCase> signInWithEmailAndPasswordUseCaseProvider) {
    return new SignInViewModel_Factory(signInWithEmailAndPasswordUseCaseProvider);
  }

  public static SignInViewModel newInstance(
      SignInWithEmailAndPasswordUseCase signInWithEmailAndPasswordUseCase) {
    return new SignInViewModel(signInWithEmailAndPasswordUseCase);
  }
}
