// Generated by Dagger (https://dagger.dev).
package com.ilinskiy.onboarding.domain.usecase;

import com.kursatkumsuz.domain.repository.DataStoreRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SaveOnBoardingStateUseCase_Factory implements Factory<SaveOnBoardingStateUseCase> {
  private final Provider<DataStoreRepository> dataStoreRepositoryProvider;

  public SaveOnBoardingStateUseCase_Factory(
      Provider<DataStoreRepository> dataStoreRepositoryProvider) {
    this.dataStoreRepositoryProvider = dataStoreRepositoryProvider;
  }

  @Override
  public SaveOnBoardingStateUseCase get() {
    return newInstance(dataStoreRepositoryProvider.get());
  }

  public static SaveOnBoardingStateUseCase_Factory create(
      Provider<DataStoreRepository> dataStoreRepositoryProvider) {
    return new SaveOnBoardingStateUseCase_Factory(dataStoreRepositoryProvider);
  }

  public static SaveOnBoardingStateUseCase newInstance(DataStoreRepository dataStoreRepository) {
    return new SaveOnBoardingStateUseCase(dataStoreRepository);
  }
}
