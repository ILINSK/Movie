// Generated by Dagger (https://dagger.dev).
package com.ilinskiy.onboarding.presentation;

import com.kursatkumsuz.onboarding.domain.usecase.SaveOnBoardingStateUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OnBoardingViewModel_Factory implements Factory<OnBoardingViewModel> {
  private final Provider<SaveOnBoardingStateUseCase> saveOnBoardingStateUseCaseProvider;

  public OnBoardingViewModel_Factory(
      Provider<SaveOnBoardingStateUseCase> saveOnBoardingStateUseCaseProvider) {
    this.saveOnBoardingStateUseCaseProvider = saveOnBoardingStateUseCaseProvider;
  }

  @Override
  public OnBoardingViewModel get() {
    return newInstance(saveOnBoardingStateUseCaseProvider.get());
  }

  public static OnBoardingViewModel_Factory create(
      Provider<SaveOnBoardingStateUseCase> saveOnBoardingStateUseCaseProvider) {
    return new OnBoardingViewModel_Factory(saveOnBoardingStateUseCaseProvider);
  }

  public static OnBoardingViewModel newInstance(
      SaveOnBoardingStateUseCase saveOnBoardingStateUseCase) {
    return new OnBoardingViewModel(saveOnBoardingStateUseCase);
  }
}
