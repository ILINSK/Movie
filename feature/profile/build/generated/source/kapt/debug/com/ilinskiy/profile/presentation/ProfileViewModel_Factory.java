// Generated by Dagger (https://dagger.dev).
package com.ilinskiy.profile.presentation;

import com.kursatkumsuz.domain.usecase.UseCases;
import com.kursatkumsuz.profile.domain.usecase.ProfileUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProfileViewModel_Factory implements Factory<ProfileViewModel> {
  private final Provider<ProfileUseCases> profileUseCasesProvider;

  private final Provider<UseCases> useCasesProvider;

  public ProfileViewModel_Factory(Provider<ProfileUseCases> profileUseCasesProvider,
      Provider<UseCases> useCasesProvider) {
    this.profileUseCasesProvider = profileUseCasesProvider;
    this.useCasesProvider = useCasesProvider;
  }

  @Override
  public ProfileViewModel get() {
    return newInstance(profileUseCasesProvider.get(), useCasesProvider.get());
  }

  public static ProfileViewModel_Factory create(Provider<ProfileUseCases> profileUseCasesProvider,
      Provider<UseCases> useCasesProvider) {
    return new ProfileViewModel_Factory(profileUseCasesProvider, useCasesProvider);
  }

  public static ProfileViewModel newInstance(ProfileUseCases profileUseCases, UseCases useCases) {
    return new ProfileViewModel(profileUseCases, useCases);
  }
}
